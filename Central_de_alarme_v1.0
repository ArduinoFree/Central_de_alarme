#include <SPI.h>
#include <Ethernet.h>

/*
 * Projeto: Central de Alarme v1.1
 * Nome: Guilherme Spadaccia 
 * Data: 20/02/2014
 * Utilizados fontes de: PAUL BADGER, 2008; JACQUES DANIEL MORESCO, 2012; David A. Mellis, 2009; 
 * Fonte criado para ser utilizado com o Arduino Uno R3 para montagem de uma central de alarme.
 */
//-----------------------------------
//variaveis usadas no leitor de RF
//-----------------------------------
int x,startbit,ctr,dataok,t1,larpulso,larpulso1,larpulso2,larpulso3,larpulso4,bt1,bt2,antcode=0;
unsigned long _data=0; // DATA é o Código recebio do HT6p20 todos os 28 BITS onde, 22 do coodigo+2 dos botões+4 do anti-codigo;
unsigned long _dur,_dur1; // Duração do Pulso
byte _pin;    // Pino que vai receber o sinal RF digital.
byte _compar1[] = {1,0,1,0,1,1,1,1,1,1,1,0,0,1,0,1,0,1,0,1,0,1,0,1,1,0,0,1,0}; //bits de comparação do sensor de porta 1
byte _compar2[] = {1,0,1,0,1,1,0,1,0,0,1,1,0,0,0,1,1,1,0,1,1,0,0,1,0,1,0,1,0}; //bits de comparação do sensor de porta 2
byte _compar3[] = {1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,0,1,0,1,1,1,0,0,1,0,1,0,1,0};
//-----------------------------------
//variaveis de controle do alarme
//-----------------------------------
int numMax = 0;
int botao1 = 6; //botão para ativação do alarme
int botao2 = 7; //botão para desativação do alarme
int rele   = 9; //saida do rele que liga a sirene
boolean rodaLeitura = true;
boolean ret = false; //retorno das funções de leitura dos botões e da RF
boolean stat = false; //variavel de controle de estado 
//long intervalo1 = 60000;
//long intervalo1 = 120000;//dalay 1 (depois da ativação)
//long intervalo2 = 60000;//dalay 2 (depois de lido o sensor)
//long intervalo3 = 3600000;//dalay 3 (tempo que o alarme tocara)

long intervalo1 = 10000;//dalay 1 (depois da ativação)
long intervalo2 = 10000;//dalay 2 (depois de lido o sensor)
long intervalo3 = 10000;//dalay 3 (tempo que o alarme tocara)

unsigned long bkpTempo1; //backup de tempo 1 (depois da ativação)
unsigned long bkpTempo2; //backup de tempo 2 (depois de lido o sensor)
unsigned long bkpTempo3; //backup de tempo 3 (tempo que o alarme tocara)
//--------------------
//Ethernet Shield
//--------------------
byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };//numero do MAC Adress
IPAddress ip(192,168,0, 8);//endereço de IP
EthernetServer server(80);//porta de listening
EthernetClient client;
boolean login = false;//variavel que define se o cliente está logado
boolean leSensor = false;
boolean aguardando = false;//indica que o sistema esta aguardando para ativar o alarme ou tocar a sirene. Tempo de delay
boolean sirene     = false;
//-----------------------------------------------------
//Inicialização das portas e algumas variaveis
//-----------------------------------------------------
void setup()                    
{
  pinMode(botao1, INPUT);
  digitalWrite(botao1,LOW);
  pinMode(botao2, INPUT);
  digitalWrite(botao2,LOW);
  _pin=8;//seta o pino 8 como leitura da RF
  Serial.begin(9600);
  pinMode(_pin, INPUT);
  pinMode(13, OUTPUT);
  pinMode(rele,OUTPUT);
  digitalWrite(13,LOW);
  // Inicia a conexão da EthernetShield
  Ethernet.begin(mac, ip);
  server.begin();
  Serial.print("server is at ");
  Serial.println(Ethernet.localIP());
}

//-----------------------------------------------------
//Função de repetição responsavel por organizar todos os
//do sistema.
//-----------------------------------------------------
void loop()                    
{
  //-----------------------------------
  //Estado 1 - aguardando ativação
  //-----------------------------------
  client = server.available();
  LeTeclado();//lê se houve ativação do alarme pelo teclado
  LeWebServer();//ve se houve ativação do alarme pela página
  if (rodaLeitura){
    LeSensor(1);//ve se o alarme foi ativado pelo controle sem fio
  }
  if (stat){//se o status estiver como true, significa que o sistema está no estado 2
    aguardando = true;
    if(millis()-bkpTempo1 > intervalo1){
        aguardando = false;
        //-------------------------------------------------
        //Estado 2 - aguardando leitura RF ou desativação
        //-------------------------------------------------
        rodaLeitura == false;
        LeSensor(2);
        if (ret){//função que faz a leitura da RF
          aguardando = true;
          if(millis()-bkpTempo2 > intervalo2){
            aguardando = false;
            //--------------------------------------------------------------------
            //Estado 3 - Sirene ativada informa ao cliente (TODO) e aguarda desativação
            //--------------------------------------------------------------------
            AtDesSirene();
          }
        }
    }
  }
}

//-----------------------------------------------------
//Função responsável pela criação e leitura da página HTML
//-----------------------------------------------------
boolean LeWebServer(){ 
 if (client) {
    Serial.println("new client");
    // an http request ends with a blank line
    boolean currentLineIsBlank = true;
    String buffer = "";
    
    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        buffer += c;
        
        if (c == '\n' && currentLineIsBlank) {
          // cabeçalho do HTML
          client.println("HTTP/1.1 200 OK");
          client.println("Content-Type: text/html");
          client.println("Connnection: close");
          client.println();
          client.println("<!DOCTYPE HTML>");
          client.println("<html>");
          //Adiciona uma tag de Refresh a página 
          if(login){
            //após logado: Refresh de 5 segundos
            client.println("<meta http-equiv=\"refresh\" content=\"5; http://192.168.0.8/\">");
          }else{
            //na tela de login: Refresh de 300 segundos
            client.println("<meta http-equiv=\"refresh\" content=\"300; http://192.168.0.8/\">");
          }

          client.print("<FORM action=\"http://192.168.0.8/\" >");
          
          if(login){
            if(leSensor){
              server.print("<p>Alarme esta ativado</p><br/>");
              
            }else{
              server.print("<p>Alarme esta desativado</p><br/>");
            }
            if (!stat){
              //Se o alarme não foi ativo permite Ativa-lo ou deslogar
              server.print("<a href='?Activate=on'><button style='background-color: #ffffff; border: 2px solid #000000;' type='button'>Ativar alarme</button></a><br/>");
              server.print("<a href='?Login=off'><button style='background-color: #ffffff; border: 2px solid #000000;' type='button'>Deslogar</button></a><br/>");
            }else{
              //Se o alarme já foi ativado permite Desativa-lo ou deslogar
              server.print("<a href='?Activate=off'><button style='background-color: #ffffff; border: 2px solid #000000;' type='button'>Desativar alarme</button></a><br/>");
              server.print("<a href='?Login=off'><button style='background-color: #ffffff; border: 2px solid #000000;' type='button'>Deslogar</button></a><br/>");
            }
            //TODO - Acionamento manual da sirene
            /*server.print("<a href='?Sirene=on'><button style='background-color: #ffffff; border: 2px solid #000000;' type='button'>Ligar Sirene</button></a><br/>");
            server.print("<a href='?Sirene=off'><button style='background-color: #ffffff; border: 2px solid #000000;' type='button'>Desligar Sirene</button></a><br/>");*/
          }else{
           //Form com os campos para login na página
           //ATENÇÃO - NÃO FOI IMPLEMENTADA   N E N H U M A   SEGURANÇA NESTE LOGIN, estou estudando a melhor forma de faze-lo
           //que mantenha o sistema 100% StandAlone
           server.print("<form name=\"login\" method=\"get\">");
           server.print("Usuario: <input type=\"text\" name=\"usu\">");
           server.print("Senha: <input type=\"text\" name=\"senha\">");
           server.print("<input type=\"submit\" value=\"Submit\">");
           server.print("</form>");
         }
          
          client.println("<br />");
          client.println("</html>");
          break;
        }
        
        if (c == '\n') {
          currentLineIsBlank = true;//inciou uma nova linha
        } 
        else if (c == '\r' ) {
          // Se tiver algum caracter na nova linha
          //Leituras quando estiver logado
          if(login){
            //se o alarme foi ativado
            if(buffer.indexOf("GET /?Activate=on")>=0 && !stat){
              Serial.println("alarme ativado");
              digitalWrite(rele,HIGH);
              delay(200);
              digitalWrite(rele,LOW);
              stat = true;
              ret = false;
              bkpTempo1 = millis();
            }
            else if(buffer.indexOf("GET /?Activate=off")>=0 && stat){
              //se o alarme foi desativado
              Serial.println("alarme desativado");
              digitalWrite(rele,LOW);
              delay(200);
              digitalWrite(rele,HIGH);
              delay(200);
              digitalWrite(rele,LOW);
              delay(200);
              digitalWrite(rele,HIGH);
              delay(200);
              digitalWrite(rele,LOW);
              stat = false;
              ret = true;
              leSensor = true;
            }
            else if(buffer.indexOf("GET /?Login=off")>=0 && login){
              Serial.println("Muda login");
              login = false;
            }
          }else{
            //verifica se o login esta correto - IMPLEMENTAR SEGURANÇA
            if(buffer.indexOf("GET /?usu=123&senha=321")>=0 && !login){
              login = true;
            }
          }
          //TODO - opção para ativar a sirene manualmente
          /*else if(buffer.indexOf("GET /?Sirene=on")>=0 && control != 3){
            Serial.println("sirene ativada");
            digitalWrite(AtivaSirene, HIGH);
            control = 3;
          }
          else if(buffer.indexOf("GET /?Sirene=off")>=0 && control != 4){
            Serial.println("sirene desativada");
            digitalWrite(AtivaSirene, LOW);
            control = 4;
          }*/
        }else{
            currentLineIsBlank = false;
          }
      }
    }
    // give the web browser time to receive the data
    delay(1);
    // close the connection:
    client.stop();
    Serial.println("client disonnected");
  }
  return(stat);
}

//-----------------------------------------------------------------------------
//Função responsável por ler o teclado para ativação/desativação manual
//-----------------------------------------------------------------------------
boolean LeTeclado(){
  if (!stat){  
    if(digitalRead(botao1) == HIGH){
      Ativacao();
    }
  }else{
    if(digitalRead(botao2) == HIGH){
      Desativacao();
    } 
  }
  return(stat);
}

boolean AtDesSirene(){
  if(!sirene){
    sirene = true;
    aguardando = false;
    digitalWrite(rele,HIGH);//ativa o rele da sirene
    bkpTempo3 = millis();//faz o backup do tempo atual para considerar o delay antes de desativar a sirene
  }else{
    if(sirene && millis()-bkpTempo3 > intervalo3){
      sirene = false;
      aguardando = true;
      digitalWrite(rele,LOW);//ativa o rele da sirene
      stat = false;//desativa o sistema altera seu estado para Aguardando Ativação
      ret = true;
      leSensor = true;
    }
  }

 return sirene;
}

//----------------------------------------------------
//Função responsável pela leitura dos dispositivos RF 
//----------------------------------------------------
boolean LeSensor(int Estado){
  leSensor = true;
  byte bytes;
  char myChar;
  if (!ret || Estado == 1){ 
  digitalWrite(13, digitalRead(_pin)); //Pisca o LED conforme o valor da entrada digital, testar interferencias.
  if (startbit==0)
  {// Testa o tempo piloto até o Bit de inicio;
    _dur = pulseIn(_pin, LOW);
    if(_dur > 8000 && _dur < 12000 && startbit==0)
    {
      larpulso=_dur/23;
      larpulso1=larpulso-50;
      larpulso2=larpulso+50;
      larpulso3=larpulso+larpulso-50;
      larpulso4=larpulso+larpulso+50;
      startbit=1;

      _dur=0;
      _data=0;
      dataok=0;
      ctr=0;
    }
  }

  // Se o Bit de inicio OK ENTÃO Inicia a medição do tempo em Nivel ALTO dos sinais, e testa se o tempo está na faixa.
  if (startbit==1 && dataok==0 && ctr < 28)
  {
    ++ctr;
    _dur1 = pulseIn(_pin, HIGH);
    if(_dur1 > larpulso1 && _dur1 < larpulso2)     // Se a largura de pulso é entre 1/4000 e 1/3000 segundos
    {
      _data = (_data << 1) + 1;      // anexar um * 1 * para a extremidade mais à direita do buffer
    }
    else if(_dur1 > larpulso3 && _dur1 < larpulso4)   // Se a largura de pulso é entre 2/4000 e 2/3000 segundos
    {
      _data = (_data << 1);       // anexar um * 0 * para a extremidade mais à direita do buffer
    }
    else
    {
      /* força finalização do laço */
      startbit=0;
    }
  }
  if (ctr==28)
  { 
    if (bitRead(_data,0)==1)
    { 
      if (bitRead(_data,1)==0)
      {
        if (bitRead(_data,2)==1)
        {
          if (bitRead(_data,3)==0)
          {
            antcode=1;
          }
        }
      }
    }
    if (antcode==1)
    {// Se foram recebidos todos os 28 Bits, o valor vai para a variavel _data e pode ser usada como exemplo abaixo.
      dataok=1;
      Serial.println(_data,BIN);
      
      //Este código comentado le o código de um sensor
      //TODO - Criar uma função para automatizar esse recurso
      /*for(int i=0; i<29;i++){
        if (bitRead(_data,i) == _compar1[i]){
          Serial.print(bitRead(_data,i),BIN);
          Serial.print(" - ");
          Serial.println(_compar1[i],BIN);
        }else{
          Serial.print(bitRead(_data,i),BIN);
          Serial.print(" - ");
          Serial.println(_compar1[i],BIN);
        }
      }*/
      
      //faz as comparações para saber qual dispositivo sem fio foi acionado
      if (Estado == 1){
        ComparaControle();
      }else{
        ComparaSensor();
        ComparaControle();
      }
      
      
      if(ret){
        bkpTempo2 = millis();
      }
      ctr=0;
      startbit=0;
      antcode=0;
      delay(100);
    }
  } 
  }
  return(ret);
}
//----------------------------------------------------------------------------
// faz as comparações com os códigos de sensores de porta cadastrados
//----------------------------------------------------------------------------
void ComparaSensor(){
  for(int i=0; i<29;i++){
    if (bitRead(_data,i) == _compar1[i]){
      ret = true;
    }else{
      ret = false;
      break;
    }
  }
  if(!ret){
    for(int i=0; i<29;i++){
      if (bitRead(_data,i) == _compar2[i]){
        ret = true;
      }else{
        ret = false;
        break;
      }
    }
  }
}

//----------------------------------------------------------------------------
// faz as comparações com os códigos do controle de ativação\desativação
//----------------------------------------------------------------------------
void ComparaControle(){
  boolean leituraCompleta = false;
  for(int i=0; i<29;i++){
    if (bitRead(_data,i) == _compar3[i]){
      leituraCompleta = true;
    }else{
      leituraCompleta = false;
      break;
    }
  }
  if(leituraCompleta){
    if (!stat){
      Ativacao();
    }else{
      Desativacao();
    }
  }
}

//----------------------------------------------------------------------------
// atualiza as variaveis de estado para ativação do alarme
//----------------------------------------------------------------------------
void Ativacao(){
  //da um toque na sirene para confirmar a ativação
  digitalWrite(rele,HIGH);
  delay(200);
  digitalWrite(rele,LOW);
  stat = true;//altera o estado do sistema para aguardar a leitura da RF
  ret = false;
  bkpTempo1 = millis();//faz o backup do tempo atual para considerar o delay antes de definitivamente ativar o alarme
}

//----------------------------------------------------------------------------
// atualiza as variaveis de estado para desativação do alarme
//----------------------------------------------------------------------------
void Desativacao(){
  //da dois toques na sirene para confirmar a desativação
  digitalWrite(rele,LOW);
  delay(200);
  digitalWrite(rele,HIGH);
  delay(200);
  digitalWrite(rele,LOW);
  delay(200);
  digitalWrite(rele,HIGH);
  delay(200);
  digitalWrite(rele,LOW);
  stat = false;//desativa o sistema altera seu estado para Aguardando Ativação
  ret = true;
  leSensor = true;
  sirene = false;
  aguardando = false;
  rodaLeitura == true;//apenas se o alarme estiver desativado faz a leitura do controle novamente, caso contrário a leitura será feita junto com o sensor de porta
}
